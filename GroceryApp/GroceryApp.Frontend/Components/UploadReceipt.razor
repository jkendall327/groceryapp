@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<div class="upload-receipt-container">
    <h3>Upload Receipt</h3>
    <InputFile OnChange="HandleSelectedFiles" accept="image/*" />
    @if (selectedFile != null)
    {
        <div class="preview">
            <p>Selected File: @selectedFile.Name</p>
            <img src="@imagePreview" alt="Receipt Preview" />
        </div>
    }
    <button class="upload-button" @onclick="UploadFile" disabled="@(!isFileSelected || isUploading)">Upload</button>
    @if (uploadMessage != null)
    {
        <p class="upload-message">@uploadMessage</p>
    }
    @if (receiptData != null)
    {
        <div class="structured-data">
            <h4>Extracted Product Information:</h4>
            @foreach (var product in receiptData.Products)
            {
                <div class="product-info">
                    <p><strong>Product Name:</strong> @product.ProductName</p>
                    <p><strong>Nutritional Info:</strong> @product.NutritionalInfo</p>
                    <p><strong>Shelf Life:</strong> @product.ShelfLife</p>
                    <p><strong>Food Category:</strong> @product.FoodCategory</p>
                    <p><strong>Unit:</strong> @product.Unit</p>
                    <p><strong>Quantity:</strong> @product.Quantity</p>
                    <p><strong>Confidence:</strong> @product.Confidence</p>
                </div>
            }

            @if (receiptData.LowConfidence)
            {
                <div class="low-confidence">
                    <p>Some information might be uncertain. Please review the extracted data.</p>
                </div>
            }
        </div>
    }
</div>

@code {
    private IBrowserFile selectedFile;
    private string imagePreview;
    private bool isFileSelected = false;
    private string uploadMessage;
    private bool isUploading = false;
    private ReceiptData receiptData;

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            isFileSelected = true;
            var buffer = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);
            imagePreview = $"data:image;base64,{Convert.ToBase64String(buffer)}";
            uploadMessage = null;
            receiptData = null;
        }
    }

    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            try
            {
                isUploading = true;
                uploadMessage = "Uploading...";
                
                using var content = new MultipartFormDataContent();
                var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                content.Add(new StreamContent(stream), "file", selectedFile.Name);

                var response = await Http.PostAsync("api/upload", content);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<UploadResponse>();
                    uploadMessage = "Upload successful!";
                    receiptData = result.ReceiptData;
                }
                else
                {
                    uploadMessage = "Upload failed. Please try again.";
                }
            }
            catch (Exception ex)
            {
                uploadMessage = $"Error: {ex.Message}";
            }
            finally
            {
                isUploading = false;
            }
        }
    }

    public class UploadResponse
    {
        public string Url { get; set; }
        public string OCRText { get; set; }
        public ReceiptData ReceiptData { get; set; }
    }

    public class ReceiptData
    {
        public List<ProductInfo> Products { get; set; }
        public bool LowConfidence { get; set; }
    }

    public class ProductInfo
    {
        public string ProductName { get; set; }
        public string NutritionalInfo { get; set; }
        public string ShelfLife { get; set; }
        public string FoodCategory { get; set; }
        public string Unit { get; set; }
        public string Quantity { get; set; }
        public double Confidence { get; set; }
    }
}
