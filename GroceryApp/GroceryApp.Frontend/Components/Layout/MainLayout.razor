@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Logging
@inherits LayoutComponentBase

<nav>
    <ul class="nav">
        <li class="nav-item">
            <NavLink class="nav-link" href="/">Home</NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="/expiration-calendar">Expiration Calendar</NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="/shopping-history">Shopping History</NavLink>
        </li>
        @if (isAuthenticated)
        {
            <li class="nav-item">
                <a class="nav-link" href="#" @onclick="Logout">Logout</a>
            </li>
        }
        else
        {
            <li class="nav-item">
                <a class="nav-link" href="/authentication/login">Login</a>
            </li>
        }
    </ul>
</nav>

<div class="main-layout">
    <NavMenu />
    <div class="content px-4">
        @Body
        <ExpirationCalendar />
    </div>
</div>

@code {
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    private ILogger<MainLayout> Logger { get; set; }

    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing MainLayout component.");
        if (AuthenticationStateProvider != null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity.IsAuthenticated;
            Logger.LogInformation("User authentication status: {IsAuthenticated}", isAuthenticated);
        }
        else
        {
            isAuthenticated = false;
            Logger.LogWarning("AuthenticationStateProvider is null. Setting isAuthenticated to false.");
        }
    }

    private void Logout()
    {
        Logger.LogInformation("User initiated logout.");
        // Implement logout logic, e.g., redirect to logout endpoint or clear authentication tokens
        // This depends on how authentication is handled in your application
        NavigationManager.NavigateTo("authentication/logout");
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}
