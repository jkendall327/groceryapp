@page "/expiration-calendar"
@using System.Globalization
@using System.Text
@using System.Text.Json
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<ExpirationCalendar> Logger

<h3>Expiration Calendar</h3>

<div class="calendar-container">
    @foreach (var day in CurrentWeek)
    {
        <div class="calendar-day @(day.Date < DateTime.Today ? "past-day" : "")">
            <h4>@day.DayOfWeek</h4>
            <p>@day.Date.ToString("MMMM dd, yyyy")</p>
            @if (ExpiringItems.ContainsKey(day.Date))
            {
                <ul>
                    @foreach (var item in ExpiringItems[day.Date].Where(i => !i.IsUsed))
                    {
                        <li>
                            <input type="checkbox" @bind="item.IsSelected" /> @item.ProductName (@item.Quantity @item.Unit)
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No items expiring on this day.</p>
            }
        </div>
    }
</div>

<button class="bulk-edit-button" @onclick="MarkSelectedAsUsed" disabled="@(!HasSelectedItems)">Mark Selected as Used</button>
<button class="export-button" @onclick="ExportToJson">Export as JSON</button>
<button class="export-button" @onclick="ExportToCsv">Export as CSV</button>

@if (feedbackMessage != null)
{
    <p class="feedback">@feedbackMessage</p>
}

@code {
    private List<DayInfo> CurrentWeek { get; set; } = new();
    private Dictionary<DateTime, List<ProductInfo>> ExpiringItems { get; set; } = new();
    private string feedbackMessage;
    private bool HasSelectedItems => ExpiringItems.Any(kvp => kvp.Value.Any(item => item.IsSelected && !item.IsUsed));

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing ExpirationCalendar component.");
        var today = DateTime.Today;
        CurrentWeek = Enumerable.Range(0, 7)
            .Select(offset => new DayInfo
            {
                Date = today.AddDays(offset),
                DayOfWeek = today.AddDays(offset).ToString("dddd", CultureInfo.InvariantCulture)
            })
            .ToList();
        
        Logger.LogInformation("Current week set from {StartDate} to {EndDate}.", CurrentWeek.First().Date, CurrentWeek.Last().Date);

        await LoadExpiringItems();
    }

    private async Task LoadExpiringItems()
    {
        Logger.LogInformation("Loading expiring items from API.");
        try
        {
            var items = await Http.GetFromJsonAsync<List<ProductInfo>>("api/receipts/expiring");
            if (items != null)
            {
                Logger.LogInformation("Received {Count} expiring items from API.", items.Count);
                foreach (var item in items)
                {
                    if (!ExpiringItems.ContainsKey(item.ExpirationDate.Date))
                    {
                        ExpiringItems[item.ExpirationDate.Date] = new List<ProductInfo>();
                    }
                    ExpiringItems[item.ExpirationDate.Date].Add(item);
                }
            }
            else
            {
                Logger.LogWarning("No expiring items were returned from the API.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading expiring items.");
            feedbackMessage = $"Error loading expiring items: {ex.Message}";
        }
    }

    private async Task MarkSelectedAsUsed()
    {
        Logger.LogInformation("Marking selected items as used.");
        var selectedIds = ExpiringItems
            .Where(kvp => kvp.Key >= DateTime.Today)
            .SelectMany(kvp => kvp.Value)
            .Where(item => item.IsSelected && !item.IsUsed)
            .Select(item => item.Id)
            .ToList();

        if (selectedIds.Count == 0)
        {
            Logger.LogInformation("No items selected to mark as used.");
            feedbackMessage = "No items selected.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/receipts/mark-used", selectedIds);
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Successfully marked {Count} items as used.", selectedIds.Count);
                foreach (var day in CurrentWeek)
                {
                    if (ExpiringItems.ContainsKey(day.Date))
                    {
                        foreach (var item in ExpiringItems[day.Date])
                        {
                            if (selectedIds.Contains(item.Id))
                            {
                                item.IsUsed = true;
                                item.IsSelected = false;
                            }
                        }
                    }
                }
                feedbackMessage = "Selected items have been marked as used.";
            }
            else
            {
                Logger.LogWarning("Failed to mark items as used. Status Code: {StatusCode}", response.StatusCode);
                feedbackMessage = "Failed to mark items as used. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error marking items as used.");
            feedbackMessage = $"Error marking items as used: {ex.Message}";
        }
    }

    private async Task ExportToJson()
    {
        Logger.LogInformation("Exporting shopping history to JSON.");
        try
        {
            var response = await Http.GetFromJsonAsync<List<PurchasedItem>>("api/shoppinghistory");
            if (response != null)
            {
                var json = JsonSerializer.Serialize(response, new JsonSerializerOptions { WriteIndented = true });
                await JSRuntime.InvokeVoidAsync("downloadFile", "shopping_history.json", "application/json", json);
                Logger.LogInformation("Successfully exported shopping history as JSON.");
                feedbackMessage = "Shopping history exported as JSON.";
            }
            else
            {
                Logger.LogWarning("No shopping history data available to export as JSON.");
                feedbackMessage = "No data available to export.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting shopping history to JSON.");
            feedbackMessage = $"Error exporting to JSON: {ex.Message}";
        }
    }

    private async Task ExportToCsv()
    {
        Logger.LogInformation("Exporting shopping history to CSV.");
        try
        {
            var response = await Http.GetFromJsonAsync<List<PurchasedItem>>("api/shoppinghistory");
            if (response != null && response.Count > 0)
            {
                var csvBuilder = new StringBuilder();
                csvBuilder.AppendLine("ProductName,NutritionalInfo,ShelfLife,FoodCategory,Unit,Quantity,Confidence,ExpirationDate,IsUsed");

                foreach (var item in response)
                {
                    var line = $"{EscapeCsv(item.ProductName)},{EscapeCsv(item.NutritionalInfo)},{EscapeCsv(item.ShelfLife)},{EscapeCsv(item.FoodCategory)},{EscapeCsv(item.Unit)},{EscapeCsv(item.Quantity)},{item.Confidence},{item.ExpirationDate:yyyy-MM-dd},{item.IsUsed}";
                    csvBuilder.AppendLine(line);
                }

                var csv = csvBuilder.ToString();
                await JSRuntime.InvokeVoidAsync("downloadFile", "shopping_history.csv", "text/csv", csv);
                Logger.LogInformation("Successfully exported shopping history as CSV.");
                feedbackMessage = "Shopping history exported as CSV.";
            }
            else
            {
                Logger.LogWarning("No shopping history data available to export as CSV.");
                feedbackMessage = "No data available to export.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting shopping history to CSV.");
            feedbackMessage = $"Error exporting to CSV: {ex.Message}";
        }
    }

    private string EscapeCsv(string value)
    {
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
        {
            value = value.Replace("\"", "\"\"");
            value = $"\"{value}\"";
        }
        return value;
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    public class DayInfo
    {
        public string DayOfWeek { get; set; }
        public DateTime Date { get; set; }
    }

    public class ProductInfo
    {
        public string Id { get; set; }
        public string ProductName { get; set; }
        public string NutritionalInfo { get; set; }
        public string ShelfLife { get; set; }
        public string FoodCategory { get; set; }
        public string Unit { get; set; }
        public string Quantity { get; set; }
        public double Confidence { get; set; }
        public DateTime ExpirationDate { get; set; }
        public bool IsUsed { get; set; }
        public bool IsSelected { get; set; }
    }

    public class PurchasedItem
    {
        public string Id { get; set; }
        public string ProductName { get; set; }
        public string NutritionalInfo { get; set; }
        public string ShelfLife { get; set; }
        public string FoodCategory { get; set; }
        public string Unit { get; set; }
        public string Quantity { get; set; }
        public double Confidence { get; set; }
        public DateTime ExpirationDate { get; set; }
        public bool IsUsed { get; set; }
    }
}
