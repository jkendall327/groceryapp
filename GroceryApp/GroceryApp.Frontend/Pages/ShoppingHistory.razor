@page "/shopping-history"
@using System.Globalization
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using Microsoft.JSInterop
@inject HttpClient Http

<h3>Shopping History</h3>

@if (loading)
{
    <p>Loading shopping history...</p>
}
else if (errorMessage != null)
{
    <p class="error">@errorMessage</p>
}
else if (shoppingHistory == null || shoppingHistory.Count == 0)
{
    <p>No shopping history available.</p>
}
else
{
    <button class="export-button" @onclick="ExportToJson">Export as JSON</button>
    <button class="export-button" @onclick="ExportToCsv">Export as CSV</button>

    <table class="shopping-history-table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Nutritional Info</th>
                <th>Shelf Life</th>
                <th>Food Category</th>
                <th>Unit</th>
                <th>Quantity</th>
                <th>Expiration Date</th>
                <th>Used Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groupedHistory)
            {
                <tr>
                    <td colspan="8" class="user-group">@group.Key</td>
                </tr>
                @foreach (var item in group.Value)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td>@item.NutritionalInfo</td>
                        <td>@item.ShelfLife</td>
                        <td>@item.FoodCategory</td>
                        <td>@item.Unit</td>
                        <td>@item.Quantity</td>
                        <td>@item.ExpirationDate.ToString("MMMM dd, yyyy")</td>
                        <td>@(item.IsUsed ? "Used" : "Not Used")</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<PurchasedItem> shoppingHistory;
    private Dictionary<string, List<PurchasedItem>> groupedHistory;
    private bool loading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            shoppingHistory = await Http.GetFromJsonAsync<List<PurchasedItem>>("api/shoppinghistory");
            if (shoppingHistory != null)
            {
                groupedHistory = shoppingHistory
                    .GroupBy(item => "User") // Replace "User" with actual user identifier if available
                    .ToDictionary(g => g.Key, g => g.ToList());
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching shopping history: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ExportToJson()
    {
        try
        {
            var json = JsonSerializer.Serialize(shoppingHistory, new JsonSerializerOptions { WriteIndented = true });
            await JSRuntime.InvokeVoidAsync("downloadFile", "shopping_history.json", "application/json", json);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error exporting to JSON: {ex.Message}";
        }
    }

    private async Task ExportToCsv()
    {
        try
        {
            var csvBuilder = new StringBuilder();
            csvBuilder.AppendLine("ProductName,NutritionalInfo,ShelfLife,FoodCategory,Unit,Quantity,ExpirationDate,IsUsed");

            foreach (var item in shoppingHistory)
            {
                var line = $"{EscapeCsv(item.ProductName)},{EscapeCsv(item.NutritionalInfo)},{EscapeCsv(item.ShelfLife)},{EscapeCsv(item.FoodCategory)},{EscapeCsv(item.Unit)},{EscapeCsv(item.Quantity)},{item.ExpirationDate:yyyy-MM-dd},{item.IsUsed}";
                csvBuilder.AppendLine(line);
            }

            var csv = csvBuilder.ToString();
            await JSRuntime.InvokeVoidAsync("downloadFile", "shopping_history.csv", "text/csv", csv);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error exporting to CSV: {ex.Message}";
        }
    }

    private string EscapeCsv(string value)
    {
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
        {
            value = value.Replace("\"", "\"\"");
            value = $"\"{value}\"";
        }
        return value;
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    public class PurchasedItem
    {
        public string Id { get; set; }
        public string ProductName { get; set; }
        public string NutritionalInfo { get; set; }
        public string ShelfLife { get; set; }
        public string FoodCategory { get; set; }
        public string Unit { get; set; }
        public string Quantity { get; set; }
        public double Confidence { get; set; }
        public DateTime ExpirationDate { get; set; }
        public bool IsUsed { get; set; }
    }
}
